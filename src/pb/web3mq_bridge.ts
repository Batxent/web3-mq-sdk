// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "web3mq_bridge.proto" (package "pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';

/**
 * @generated from protobuf message pb.Web3MQBridgeConnectCommand
 */
export interface Web3MQBridgeConnectCommand {
  /**
   * @generated from protobuf field: string NodeID = 1 [json_name = "NodeID"];
   */
  nodeID: string;
  /**
   * @generated from protobuf field: string DAppID = 2 [json_name = "DAppID"];
   */
  dAppID: string;
  /**
   * @generated from protobuf field: string TopicID = 3 [json_name = "TopicID"];
   */
  topicID: string;
  /**
   * @generated from protobuf field: optional uint64 SignatureTimestamp = 4 [json_name = "SignatureTimestamp"];
   */
  signatureTimestamp?: bigint;
  /**
   * @generated from protobuf field: optional string DAppSignature = 5 [json_name = "DAppSignature"];
   */
  dAppSignature?: string;
}

// @generated message type with reflection information, may provide speed optimized methods
class Web3MQBridgeConnectCommand$Type extends MessageType<Web3MQBridgeConnectCommand> {
  constructor() {
    super('pb.Web3MQBridgeConnectCommand', [
      { no: 1, name: 'NodeID', kind: 'scalar', jsonName: 'NodeID', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'DAppID', kind: 'scalar', jsonName: 'DAppID', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'TopicID', kind: 'scalar', jsonName: 'TopicID', T: 9 /*ScalarType.STRING*/ },
      {
        no: 4,
        name: 'SignatureTimestamp',
        kind: 'scalar',
        jsonName: 'SignatureTimestamp',
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 5,
        name: 'DAppSignature',
        kind: 'scalar',
        jsonName: 'DAppSignature',
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }

  create(value?: PartialMessage<Web3MQBridgeConnectCommand>): Web3MQBridgeConnectCommand {
    const message = { nodeID: '', dAppID: '', topicID: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined)
      reflectionMergePartial<Web3MQBridgeConnectCommand>(this, message, value);
    return message;
  }

  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Web3MQBridgeConnectCommand,
  ): Web3MQBridgeConnectCommand {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        /* string NodeID = 1 [json_name = "NodeID"];*/
        case 1:
          message.nodeID = reader.string();
          break;
        /* string DAppID = 2 [json_name = "DAppID"];*/
        case 2:
          message.dAppID = reader.string();
          break;
        /* string TopicID = 3 [json_name = "TopicID"];*/
        case 3:
          message.topicID = reader.string();
          break;
        /* optional uint64 SignatureTimestamp = 4 [json_name = "SignatureTimestamp"];*/
        case 4:
          message.signatureTimestamp = reader.uint64().toBigInt();
          break;
        /* optional string DAppSignature = 5 [json_name = "DAppSignature"];*/
        case 5:
          message.dAppSignature = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }

  internalBinaryWrite(
    message: Web3MQBridgeConnectCommand,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string NodeID = 1 [json_name = "NodeID"]; */
    if (message.nodeID !== '') writer.tag(1, WireType.LengthDelimited).string(message.nodeID);
    /* string DAppID = 2 [json_name = "DAppID"]; */
    if (message.dAppID !== '') writer.tag(2, WireType.LengthDelimited).string(message.dAppID);
    /* string TopicID = 3 [json_name = "TopicID"]; */
    if (message.topicID !== '') writer.tag(3, WireType.LengthDelimited).string(message.topicID);
    /* optional uint64 SignatureTimestamp = 4 [json_name = "SignatureTimestamp"]; */
    if (message.signatureTimestamp !== undefined)
      writer.tag(4, WireType.Varint).uint64(message.signatureTimestamp);
    /* optional string DAppSignature = 5 [json_name = "DAppSignature"]; */
    if (message.dAppSignature !== undefined)
      writer.tag(5, WireType.LengthDelimited).string(message.dAppSignature);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}

/**
 * @generated MessageType for protobuf message pb.Web3MQBridgeConnectCommand
 */
export const Web3MQBridgeConnectCommand = new Web3MQBridgeConnectCommand$Type();
